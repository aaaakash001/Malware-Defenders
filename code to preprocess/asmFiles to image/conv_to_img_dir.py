from PIL import Image
import os
from collections import Counter

def tokenize_assembly(assembly_code):
    return assembly_code.split()

def generate_image(tokens, image_size):
    opcode_freq = Counter(tokens)
    max_freq = max(opcode_freq.values())

    image = Image.new("L", image_size)

    for i in range(image_size[0]):
        for j in range(image_size[1]):
            token = tokens[(i * image_size[1] + j) % len(tokens)]
            pixel_intensity = int((opcode_freq[token] / max_freq) * 255)
            image.putpixel((i, j), pixel_intensity)

    return image

# Directory containing ASM files
asm_directory = 'asm_files'

# Output directory for images
output_directory = 'img_files'

# Image dimensions
image_size = (224, 224)  # Adjust the dimensions based on your preference

# Loop through ASM files
for root, dirs, files in os.walk(asm_directory):
    for filename in files:
        if filename.endswith(".asm"):
            # Construct ASM file path
            asm_file_path = os.path.join(root, filename)

            # Read ASM file in binary mode
            with open(asm_file_path, 'rb') as asm_file:
                assembly_code = asm_file.read().decode(errors='replace')

            # Tokenization
            tokens = tokenize_assembly(assembly_code)

            # Image Generation
            image = generate_image(tokens, image_size)

            # Construct output image directory
            relative_path = os.path.relpath(asm_file_path, asm_directory)
            image_dir = os.path.join(output_directory, os.path.dirname(relative_path))

            # Create the corresponding directory structure in the image folder
            os.makedirs(image_dir, exist_ok=True)

            # Save the grayscale image
            image_filename = os.path.splitext(filename)[0] + '_freq.png'
            image_path = os.path.join(image_dir, image_filename)
            image.save(image_path)

            print(f"Frequency-based image saved: {image_path}")
